#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#define maxchild 10

void handle_interrupt (int sig);

int main () {
    int num_of_child, i;
    int child_pids [maxchild];
    int fd [maxchild][2];
    char message[100];

    signal (SIGINT, handle_interrupt);

    printf ("Enter the number of child processes to be fork (max %d): ", maxchild);
    scanf ("%d", &num_of_child);

    if (num_of_child > maxchild) {
        printf ("Error: too many amount of children has been entered!\n");
        exit (1);
    }
    for (i = 0; i < num_of_child; i++) {
        if (pipe (fd[i]) == -1) {
            perror ("pipe");
            exit (1);
        }

        child_pids [i] = fork();

        if (child_pids [i] == -1) {
            perror ("fork");
            exit (1);
        }

        if (child_pids [i] == 0) {
            close (fd[i][1]); 
            while (1) {
                char buffer[100];
                int j = read (fd[i][0], buffer, 100);
                if (j <= 0) {
                    break;
                }
                printf ("Child %d has received message: %.*s\n", i, j, buffer);
            }
            close (fd[i][0]);
            exit (0);
        } else {
            close (fd[i][0]);
        }
    }
    while (1) {
        printf ("Enter a message to send to child (or type 'exit' to quit): \n");
        scanf ("%s", message);

        if (strcmp (message, "exit") == 0) {
            break;
        }

        for (i = 0; i < num_of_child; i++) {
            write (fd[i][1], message, strlen (message) + 1); 
            }
    }
    for (i = 0; i < num_of_child; i++) {
        close (fd[i][1]);
    }
    for (i = 0; i < num_of_child; i++) {
        waitpid (child_pids[i], NULL, 0);
    }

    printf ("Exiting the program!\n");
    exit (0);
}

void handle_interrupt (int sig) {
    printf ("Interrupt signal received. Exiting the program!\n");
    exit (0);
}
